#+STARTUP: hidestars showall
* <2014-03-08 Sat>
** Running a test of the new features
#+BEGIN_SRC sh
cd test
../bin/fribidi --charset CapRTL test_CapRTL_isolate.input 
#+END_SRC
   - No link to gen-bidi-type-tab .
* <2014-03-16 Sun>
** Running more extensive tests
#+BEGIN_SRC sh
../bin/fribidi --basedir --showinput --levels --charset CapRTL test_CapRTL_isolate.input  
#+END_SRC
* <2015-05-24 Sun>
** Issues not covered in my current implementation
   - In X2 and X3. Deal with overflow isolate count.
   - Terminology
     | Fribidi       | Unicode document         |
     |---------------+--------------------------|
     |               | overflow isolate count   |
     | ~over_pushed~ | overflow embedding count |
     | ~isolate~     | valid isolate count      |
* <2015-05-29 Fri>
** Comparing with the bidi ref test
The following scenario was used for comparing with the bidi reference
 - Download and compile the bidiref test with the following SConstruct file in file:../BidiReferenceC/6.3.0/source
#+BEGIN_SRC python
import glob

env = Environment(CPPFLAGS=['-Wall','-g'],
                  CPPPATH=['../include'])

env.Program('bidiref',
            glob.glob('*.c'))
#+END_SRC 
 - Run test suite on fribidi with:
#+BEGIN_SRC sh
cd ../fribidi-vs-unicode
./test BidiTest.txt | head -20
#+END_SRC 
  - Create a file ~BidiTestSmall.txt~ that only contain the failing test. E.g.:
#+BEGIN_EXAMPLE
@Levels:	0 x x 1
@Reorder:	0 3
RLI LRE PDF R; 3
#+END_EXAMPLE  
  - Run the bidiref test on this single test with:
#+BEGIN_SRC sh
./bidiref -d4 -x BidiTestSmall.txt
#+END_SRC 
  - Note that bidiref contains magic to recognize the unicode file format only if the input file name contains the string "BidiTest".
  - An example failing run for fribidi is:
#+BEGIN_EXAMPLE
> ./test b.txt 
failure on line 4
input is: RLI LRE PDF R; 3
base dir: auto
expected levels: 0 x x 1
returned levels: 0 0 0 3
expected order: 0 3
returned order: 0 3
#+END_EXAMPLE
  - Goal is to debug, compare, and fix all ~BidiTestSmall.txt~ until the entire file passes.
** Errors
   - [X] Line 63038: RLI LRE PDF R; 3
   - [ ] Line 66856: R RLI R  . 
*** R RLI R
    - Expected levels vs fribidi levels: 1 0 1 vs 1 1 1
    - Don't understand the difference between the embedding level and the paragraph embedding level. 
    - How can a level be lower than the paragraph level?
* <2015-05-31 Sun>
** Regarding R RLI R
   - The problem is that N1 and N2 are done over isolating boundaries. This needs to be fixed! Either by remembering the isolating sequence level of each run and make sure to connect only runs of the same level, or alternatively to always sweep and count. Both of these solutions are slow as they require sweeping over inner runs. A faster solution would be to have a pointer to the next run of the same sequence. Can this be done efficiently?
* <2015-06-05 Fri>
  - [ ] make macros ~PREV_TYPE_SKIP_ISOLATE~ and ~NEXT_TYPE_SKIP_ISOLATE~ macros based on the code in N1.
* <2015-06-18 Thu>
** NSI merging problems
   - The following ~b.txt~ shows that there is a difference between an isolated NSM and one preceded by an isolating sequence.
#+BEGIN_EXAMPLE
@Levels:	1
@Reorder:	0
NSM; 4

@Levels:	1 1 1
@Reorder:	2 1 0
LRI PDI NSM; 4
#+END_EXAMPLE   
   - In both these cases, because of the RTL direction, the NSM should get the type of the base direction. This currently does not happen. See TBDov
* <2015-06-20 Sat>
** Test progress
   | Date           | Num fail | First line fail | First fail                                 |
   |----------------+----------+-----------------+--------------------------------------------|
   | 2015-06-20 Sat |      139 |          236713 |                                            |
   |                |       22 |          497052 | R ON FSI L PDI LRI L PDI RLI L PDI ON R; 2 |
** Thoughts
   - The quest of finding a single strategy for finding the next and previous types seem to fail. It seems like every rule is looking for something different. 
   - The real problem is that sequences like ~R OL LRI ... PDI OL R~ should really be interpreted as ~R OL OL OL R~ for the algorithm to work. But in contrast to ~R OL OL OL~ that is compacted as ~R OL×3 R~ and which may be matched by a simple forward and backward match, in ~LRI ... PDI~ the right hand R must be found by scanning. This is what Ι tried doing in my changes to fribidi so far, but it failed due to differen needs.
   - My strategy is first finding a scanning strategy that works, and only afterwards optimizing it.
* <2015-06-21 Sun>
** Test progress
   | Date           | Num fail | First line fail | First fail                                      |
   |----------------+----------+-----------------+-------------------------------------------------|
   | 2015-06-21 Sat |       18 |          236713 | AL ON FSI L PDI LRI L PDI RLI R PDI ON ET EN; 2 |

   - Note: I believe this is a bug...
* <2015-08-23 Sun>
** Misc
   - All the unicode files should be moved to a common place, as ~BidiTest.txt~ and ~BidiCharacterTest.txt~ are needed for testing. This means moving out the ~UnicodeData.txt~ from ~gen.tab~ e.g. to ~.../fribid/Unidata~. 
   - Create a new branch IsoLinks that adds FriBidiRun, ~next_iso~ and ~prev_iso~ for next and previous isolate runs.
f   - ~test.c~ should probably be renamed to ~test-bidi-test-txt.c~ and ~test-character~ should be changed to ~test-bidi-character-test-txt.c~ to reflect what they test.
* <2016-01-24 Sun>
** Packing stuff
   - [ ] Should we make sure that bootstrap and dependencies is clean? Currently lots of warnings on my system:
#+BEGIN_SRC sh
configure.ac:201: warning: LT_INIT was called before AM_PROG_AR
/usr/share/aclocal-1.15/ar-lib.m4:13: AM_PROG_AR is expanded from...
configure.ac:201: the top level
configure.ac:201: warning: LT_INIT was called before AM_PROG_AR
aclocal.m4:9317: AM_PROG_AR is expanded from...
configure.ac:201: the top level
libtoolize: putting auxiliary files in '.'.
libtoolize: copying file './ltmain.sh'
libtoolize: Consider adding 'AC_CONFIG_MACRO_DIRS([m4])' to configure.ac,
libtoolize: and rerunning libtoolize and aclocal.
libtoolize: Consider adding '-I m4' to ACLOCAL_AMFLAGS in Makefile.am.
configure.ac:201: warning: LT_INIT was called before AM_PROG_AR
/usr/share/aclocal-1.15/ar-lib.m4:13: AM_PROG_AR is expanded from...
configure.ac:201: the top level
configure.ac:201: warning: LT_INIT was called before AM_PROG_AR
aclocal.m4:9317: AM_PROG_AR is expanded from...
configure.ac:201: the top level
configure.ac:201: warning: LT_INIT was called before AM_PROG_AR
aclocal.m4:9317: AM_PROG_AR is expanded from...
configure.ac:201: the top level
configure.ac:201: warning: LT_INIT was called before AM_PROG_AR
aclocal.m4:9317: AM_PROG_AR is expanded from...
configure.ac:201: the top level
configure.ac:55: installing './compile'
configure.ac:50: installing './missing'
bin/Makefile.am: installing './depcomp'
lib/Headers.mk:22: warning: shell cat $(top_srcdir: non-POSIX variable name
lib/Headers.mk:22: (probably a GNU make extension)
doc/Makefile.am:26:   'lib/Headers.mk' included from here
lib/Headers.mk:22: warning: shell cat $(top_srcdir: non-POSIX variable name
lib/Headers.mk:22: (probably a GNU make extension)
lib/Makefile.am:28:   'lib/Headers.mk' included from here
test/Makefile.am:30: warning: '%'-style pattern rules are a GNU make extension
#+END_SRC   
  - configure ok.
  - make passes but outputs warnings about missing c2man.
#+BEGIN_SRC sh
WARNING: 'c2man' is missing on your system.
         You might have modified some files without having the proper
         tools for further handling them.  Check the 'README' file, it
         often tells you about the needed prerequisites for installing
         this package.  You may also peek at any GNU archive site, in
         case some other package contains this missing 'c2man' program.
#+END_SRC  
  - Found c2man at http://www.ciselant.de/c2man/c2man.html , but it is not compatible with the make file usage.
  - "make test" doesn't do anything.
* <2016-01-25 Mon>
** Release engineering
   - Got "new" c2man from Ubuntu archive at https://answers.launchpad.net/ubuntu/+source/c2man/2.41-18
   - Compiled as follows:
#+BEGIN_SRC sh
tar -xf ~/hd/Download/c2man_2.41.orig.tar.gz 
mv c2man-2.41.orig c2man-2.41-18   
cd c2man-2.41-18 
zcat ~/hd/Download/c2man_2.41-18.diff.gz| patch -p1
./Configure
make install
#+END_SRC   
   - Verified that man pages are reasonoble (after fix to invocation of c2man).
   - [ ] Wait for response from Behdad about the issues in mail I sent.
   - [X] Rename unicode63 branch to dov-unicode63 branch.
   - [X] Create new branch unicode63 out of master.
   - [X] Manually cherry pick from dov-unicode63 changes.
   - [X] Squash and rebase dov-unicode63 on top of unicode63.
   - [ ] Pull request to Behdad (after got mail)
** Testing
#+BEGIN_SRC sh
env LD_LIBRARY_PATH=../lib/.libs ./test BidiTest.txt 
#+END_SRC
  - Still 15 errors.
* <2016-01-28 Thu>
** Investigating failure
   - Not clear to me the correctness of the following test:
#+BEGIN_EXAMPLE
@Levels:	0 0 x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x 124 124 124
@Reorder:	0 1 66 67 68
L WS LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO LRO RLO L L L; 2
#+END_EXAMPLE
  - Why doesn't the RLO raise the level to 125?
  - Compare with Behdads file:../pybyedie . Oops! Doesn't support 6.3. :-(
  - Found reason! There is one more LRO than Ι thought that wants to push the level to 126 which is illegal. We therefore get overflow which should prevent the RLO from increasing the level further!
  - [ ] Figure out why this does not happen.
* <2016-01-29 Fri>
** Failure
   - Added prevention of going from 124 → 125 in case of overflow. Solved 3 errors.
   - [ ] Solve 12 remaining errors. :-)
* <2016-01-30 Sat>
** Compiling with debug
#+BEGIN_SRC sh
env CFLAGS='-fPIC -g -O0' ./configure --prefix=/usr/local --with-pic
#+END_SRC  
** Failures
   - Next failure:
#+BEGIN_EXAMPLE
@Levels:	x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x 124 x 125 x 125 x x x x 125 x 125 x 124
@Reorder:	62 73 71 66 64 75
LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE ON RLO L LRE RLI LRE RLE LRO RLO PDI PDF L PDF ON; 1
#+END_EXAMPLE
   - The resulting discrepancy is:
#+BEGIN_EXAMPLE
        Exp Ret
:
61: LRE   x   0
62: ON  124 124
63: RLO   x 124
64: L   125 125
65: LRE   x 125
66: RLI 125 125
67: LRE   x 125
68: RLE   x 125
69: LRO   x 125
70: RLO   x 125
71: PDI 125   1
72: PDF   x   1
73: L   125 125
74: PDF   x 125
75: ON; 124 124
#+END_EXAMPLE   
   - Solved by 
#+BEGIN_EXAMPLE
@@ -539,7 +543,11 @@ fribidi_get_par_embedding_levels (
           for (i = RL_LEN (pp); i; i--)
             {
               if (isolate_overflow > 0)
-                isolate_overflow--;
+                {
+                  isolate_overflow--;
+                  RL_LEVEL (pp) = level;
+                }
#+END_EXAMPLE      
  - Next bug.
#+BEGIN_EXAMPLE
@Levels:	x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x 123 x 124 124 124 x x x x 124 124 124 x 123
@Reorder:	75 64 65 66 71 72 73 62
LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE RLE ON LRO R LRI R LRE RLE LRO RLO R PDI R PDF ON; 1
#+END_EXAMPLE
 - which yielded:
#+BEGIN_EXAMPLE
62: ON  123 123  
63: LRO   x 123  
64: R   124 124  
65: LRI 124 124  
66: R   124 124  
67: LRE   x 124  
68: RLE   x 124  
69: LRO   x 124  
70: RLO   x 124  
71: R   124 125  (x)
72: PDI 124 125  (x)
73: R   124 125  (x)
74: PDF   x 125  
75: ON  123 124  (x)
#+END_EXAMPLE
  - The problem was that character 71 was increased even though we were in isolate mode. 
  - Fixed!
  - Next error:
#+BEGIN_EXAMPLE
failure on line 497576
input is: LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE LRE RLE ON LRO R RLI ON LRO RLE RLO LRE ON PDI R PDF ON; 7
base dir: auto
expected levels: x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x x 123 x 124 124 125 x x x x 125 124 124 x 123
returned levels: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 123 123 124 124 125 125 125 125 125 125 125 125 125 125
expected order: 75 64 65 71 66 72 73 62
returned order: 64 65 75 73 72 71 66 62
#+END_EXAMPLE    
 - with output:
#+BEGIN_EXAMPLE
60: LRE   x   1  
61: RLE   x   1  
62: ON  123 123  
63: LRO   x 123  
64: R   124 124  
65: RLI 124 124  
66: ON  125 125  
67: LRO   x 125        overflow++
68: RLE   x 125        overflow++
69: RLO   x 125        overflow++
70: LRE   x 125        overflow++
71: ON  125 125        
72: PDI 124 125  (x)   should pop to RLI@65! -> 124
73: R   124 125  (x)
74: PDF   x 125        should pop to LRO@63 -> 123
75: ON; 123 125  (x)
#+END_EXAMPLE 
  - The problem was that the PDI did not reset the overpushed level! Once it was inserted all tests pass.
  - Patch that solved the problems:
#+BEGIN_EXAMPLE
@@ -281,6 +281,7 @@ print_bidi_string (
 #define PUSH_STATUS \
     FRIBIDI_BEGIN_STMT \
       if LIKELY(over_pushed == 0 \
+                && isolate_overflow == 0 \
                 && new_level <= FRIBIDI_BIDI_MAX_EXPLICIT_LEVEL)   \
         { \
           if UNLIKELY(level == FRIBIDI_BIDI_MAX_EXPLICIT_LEVEL - 1) \
@@ -551,6 +552,7 @@ fribidi_get_par_embedding_levels (
                      terminated by the PDI */
                   while (stack_size && !status_stack[stack_size-1].isolate)
                     POP_STATUS;
+                  over_pushed = 0; /* The PDI resets the overpushed! */
                   POP_STATUS;
                   isolate_level-- ;
                   valid_isolate_count--;
#+END_EXAMPLE    
* <2017-07-15 Sat>
** Debugging with C11
   - Allows using for() inline declarations and C++ comments.
   - file:configure.ac → ~s/-ansi/-std=c11/~
** Rebuild and testing
   - Rebuilding problems, but the following fixes it:
#+BEGIN_SRC sh
\rm -f ./fribidi-vs-unicode/.libs/test-bidi-bracketing ./fribidi-vs-unicode/test-bidi-bracketing 
make
env LD_LIBRARY_PATH=lib/.libs ./fribidi-vs-unicode/.libs/test-bidi-bracketing 
#+END_SRC   
** Entering N0 support into fribidi-main
*** So far
    - file:fribidi-vs-unicode/bd16.py - simple BD16 implementation in python.
    - file:fribidi-vs-unicode/algo_n0.py - simple N0 implementation in python
    - file:fribidi-vs-unicode/bd16.c - translation of bd16 into C
    - file:fribidi-vs-unicode/bd16-v1.c - translation of bd16 into C but with fribidi type queries. Tests the new brackets functionality.
    - file:lib/fribidi-brackets.h, file:lib/fribidi-brackets.c -lockup of bracket properties
    - file:gen.tab/gen-brackets-tab.c - Generator of the brackets tables
*** Plan
    - [X] Building a minimal test for preparation of debugging. file:fribidi-vs-unicode/test-bidi-bracketing.c
    - [ ] Create a new struct BracketType { int id; bool is opening }
    - [ ] Change the definition of a fribidi run so that it includes the bracket type.
    - [ ] Change splitting so that it takes into account the bracketing property.
    - [ ] Check that algo (except bracketing) still works.
    - [ ] Insert N0 algo befor N1 and N2.
    - [ ] Pack the resulting runs.
** Work log
   - Created example test-bidi-bracketing.c that carries out and debug prints the first N0 example from th edocumentation.
   - Create checkpoint of current work: commit:5cff594
   - [X] Create structure BracketType.
   - [X] Added the following silenting flags to configure.ac: ~-Wno-unused-result -Wno-switch -Wno-deprecated-declarations~ to silent current warnings from fribidi. Should ask Behdad if he intends to clean these.
   - [X] Update test-bracketing.c to use the new type.
   - [X] Add FriBidiBracketType to the FriBidiRun
   - [X] Initialize bidi type when building the runs.
   - [X] Split according to the bidi type.
   - [ ] Idea, make char type a structure and incorporate the bracketing property into it? Currently need to pass both types and bracket types. Discuss with Behdad.
   - [X] Currently ~fribidi_get_bracket()~ returns a boolean and a structure by reference. Does it make sens to have it return the structure in the return statement instead. Will do this change.
   - [X] After N0 the run list bidi types should be reset to ~NO_BRACKET~ to allow compactification.
   - [X] Test that the BidiTest.txt still returns 0 errors.
   - [X] Decide about type for the BD16 pairs:
#+BEGIN_SRC c
#define FRIBIDI_BRACKET_PAIR_STACK_SIZE 63
paren_pair_t *pair_stack;
pair_stack = (element_t*)malloc (sizeof (pair_stack[0]) *
                                 FRIBIDI_BRACKET_PAIR_STACK_SIZE);

struct paren_pair_t {
  FriBidiRun *start;
  FriBidiRun *end;
};
#+END_SRC     
    - [X] Put the allocation / deallocation code for the stack in the code.
    - [X] Build pair stack without taking isolation into account.
    - [X] Change name of ~bracket_pair_stack~ to ~bracket_stack~
    - [ ] Modify to take isolation into account.
    - [ ] Loop over the found pairs and implement the N0 algo.
    - Testing a single instance string. (This is yields wrong result in iteration 1 below)
#+BEGIN_SRC sh
env LD_LIBRARY_PATH=lib/.libs ./fribidi-vs-unicode/.libs/test-bidi-bracketing 'a(C)'
#+END_SRC    
    - Found error in comparison of embedding dir! After fix 522 errors.
    - Got error in line 2074 on '(a)(b)c' with RTL embedding. Two errors were found that caused this:
    1. There was a logical error in the implementation N2c
    2. The bracket list was not sorted!
    - Iteration 3: 
   - Got error on line 50292 and also on 'a(b)).A'. Found the error that the run length joined the two ')' characters! But this is wrong! They can't be treated as a unit.
   - [ ] Make brackets always occupy one character runs! (It is probably possible to do something clever with longer runs and smarter logics for spliting, etc. But it is probably not worth the trouble.)
** test-character error progress
   | Iteration | #Errors | Comment                                                 |
   |-----------+---------+---------------------------------------------------------|
   |         0 |    7537 | Before n0                                               |
   |         1 |    6050 | First trial                                             |
   |         2 |     522 | Fixed embedding dir err                                 |
   |         3 |     280 | Forced bracket runs to be of size 1                     |
   |         4 |      10 | See below                                               |
   |         5 |    3454 | After rewrite of using levels instead of R or L         |
   |           |         | (I should commit more often!)                           |
   |         6 |       8 | "Fake improvement". Still have RLE problems...          |
   |         7 |      11 | Updated the BidiCharacterTest.txt to the latest version |

** Mapping of remaining errors
   |     | Error (line) | Problem               |
   |-----+--------------+-----------------------|
   | #1  |          205 | LRI                   |
   | #2  |          211 | FSI                   |
   | #3  |          218 | RLE/PDF               |
   | #4  |          219 | RLE/PDF               |
   | #5  |          220 | RLE/PDF               |
   | #6  |          226 | RLI/LRI/RLE/PDF       |
   | #7  |          235 | LRI/RLI               |
   | #8  |          237 | LRI                   |
   | #9  |          242 | Canonical equivalence |
   | #10 |          243 | Canonical equivalence |
   - [ ] To solve the canonical equivalence gen-brackets-tab.c should be changed to encode the canonical equivalent character as the bracket id instead of the current value. Alternatively lookup the canonical equivalence in ~fribidi_get_bracket_type()~. Less memory to encode the canonical equivalent directly.
** Other
   - [ ] Figure out the RLE/PDF error on line #219. Ok, the reason is that the embedding level is 1, but the level of the RLE'd contents is 3, therefore there is no match and the embedded RTL should not be used to apply N0c.
  - Tried using levels instead of RTL dir. Failed. Got 3544 errors. Failed attempt saved in fribidi-bidi-level.c
  - [ ] Create checkpoint of current 10 errors. Commit: 
  - [ ] When overriding the no bracket, can do it faster through the pair list!
** Bug report to unicode concortium:
   - Reporting page: http://www.unicode.org/reporting.html
   - Contents of report:
#+BEGIN_QUOTE
Hello,

I'm trying to pass all the tests in BidiCharacterTest.txt , and I'm having problem understanding a few of the tests that to me appear to contradict the spefication. The problematic lines in BidiCharacterTest-10.0.0.txt are the tests on lines 262, 263, and 264.

Let's consider test from line 262:

Dir: RTL
Input:   a ( b <RLE> c <pdf> ) _ 1
Level:   2 2 2 x 4 x 1 1 2

The problem I'm having is that the first opening bracket is assigned level 2 and the closing bracket level 1.

This seems to contradict the three rules N0.b, N0.c.1, and N0.c.2 in the specification that all describe overriding the type of both brackets with either the matching or the opposite direction. The only case we can possibly get different levels (correct me if I'm wrong!) is if rule N0.d is applied and the brackets retain their neutral status until it is resolved in subsequent rules.

I would very much appreciate if you would either acknowledge a bug or correct a misunderstanding on my part.

Thank you in advance!
Dov
#+END_QUOTE   
* <2017-07-21 Fri>
** Done/Todo
   - [X] Make one paren list bd16 per bidi level.
   - Tested with the simpl character test from above:
#+BEGIN_SRC sh
env LD_LIBRARY_PATH=lib/.libs ./fribidi-vs-unicode/.libs/test-bidi-bracketing 'a(C)'
#+END_SRC    
   - Note: should always test with valgrind as well.
   - [X] Testing the failure rate. Got 11 errors.
#+BEGIN_SRC sh
env LD_LIBRARY_PATH=lib/.libs  ./fribidi-vs-unicode/.libs/test-character ./fribidi-vs-unicode/BidiCharacterTest.txt 
#+END_SRC   
   - First test that fails is not bracket related. Line=60.
| Input:           | <RLO> | a | <LRE> | b | <PDF> | <LRI> | c | <PDI> | <LRE> | d | <PDF> | e | <PDF> |
| Expected levels: | x     | 3 | x     | 4 | x     |     3 | 4 |     3 | x     | 4 | x     | 3 | x     |
| Returned levels: | 1     | 3 | 3     | 4 | 4     |     4 | 4 |     4 | 4     | 4 | 4     | 3 | 1     |
  - The LRI shouldn't have a raised level.
  - Save in line60.txt
  - Don't understand the test 60:
    - The problem is regarding 3.3.6 I1 and I2 "Resolving Implicit Levels":
      - Before I1 and I2 LRI has level 3
      - But since the embedding level is odd and we have an L Type, it's EL should be changed to EL+1.
      - If I ignore increasing the EL by the following patch below, then Line 60 passes. But I get 71 failures in BidiTest.txt .
#+BEGIN_SRC patch
diff --git a/tmp/2.c b/tmp/1.c
index 4401697..4dd98af 100644
--- a/tmp/2.c
+++ b/tmp/1.c
@@ -1208,7 +1208,7 @@ fribidi_get_par_embedding_levels (
       else
         next_type = FRIBIDI_LEVEL_TO_DIR(MAX(RL_LEVEL(ppp_next), RL_LEVEL(pp)));
 
-      if (FRIBIDI_IS_NEUTRAL (this_type))
+      if (FRIBIDI_IS_NEUTRAL (this_type) && !FRIBIDI_IS_ISOLATE(this_type))
 	RL_TYPE (pp) = (prev_type == next_type) ?
 	  /* N1. */ prev_type :
 	  /* N2. */ FRIBIDI_EMBEDDING_DIRECTION (pp);
#+END_SRC      
   - Example of a failure in BidiTest.txt, on line 496064
     - base dir: RTL
| input is:        | L | FSI | PDI | EN |
| expected levels: | 2 |   2 |   2 |  2 |
| returned levels: | 2 |   1 |   1 |  2 |

#+BEGIN_EXAMPLE
failure on line 496064
input is: L FSI PDI EN; 4
base dir: RTL
expected levels: 2 2 2 2
returned levels: 2 1 1 2
expected order: 0 1 2 3
returned order: 3 2 1 0
#+END_EXAMPLE   
   - From UAX#9: "directional isolates have the effect of a neutral. E.g. they don't affect the surrounding". And since neutrals are raised in I1,I2 the isolates should be raised as well.
   - Found the reason for the Line 60 error! I was not taking the override flag into account when encountiring an isolate character. 
   - Down to 10 errors.
   - Implemented the rule "Within this scope, bidirectional types EN and AN are treated as R" of N0. Down to 8 errors. Saved in: file:err-it8.txt
   - Summary:
   | Line | Reason                                         |
   |------+------------------------------------------------|
   |  249 | How to retrieve the embedding level?           |
   |  262 | Disruptiveness of Embedding and override chars |
   |  263 | "                                              |
   |  264 | "                                              |
   |  270 | ? but probably the embedding level             |
   |  281 | "                                              |
   |  286 | Canonical equivalent characters                |
   |  287 | "                                              |
    - [ ] Idea of how to retrieve the embedding level. Add it to the run length and encode it for each rl as we sweep through.
* <2017-07-23 Sun>
** Use Canonical Equivalence
   - Use Canonical Equivalence for the unicode tables.
   - See: http://unicode.org/reports/tr15/tr15-18.html, Annex 4 for example of how to parse
   - Example:
#+BEGIN_SRC python
s = '00E1;LATIN SMALL LETTER A WITH ACUTE;Ll;0;L;0061 0301;;;;N;LATIN SMALL LETTER A ACUTE;;00C1;;00C1'
A = s.split(';')
return A[5]
#+END_SRC   

#+RESULTS:
: 0061 0301
   - Bracket characters that have mappings. Note that by using logics as below in the mapping table we basically ignore modifiers like <wide>,<narrow>,<super> etc when matching brackets.
#+BEGIN_SRC python
  def dehex(v):
    try:
      return int(v,16)
    except:
      return -1

  br = {}
  with open('gen.tab/unidata/BidiBrackets.txt') as fh:
    for line in fh:
       if len(line)==1 or line[0]=='#':
          continue
       a = line.split(';')
       br[dehex(a[0])] = dehex(a[1])

  eqv = {}
  with open('gen.tab/unidata/UnicodeData.txt') as fh:
    for line in fh:
      a = line.split(';')
      ch = dehex(a[0])
      if not ch in br:
        continue
      ce = [w for w in [dehex(v) for v in a[5].split(' ')] if w>0]
      if len(ce)==1:   # Skip all annotations like <wide>,<super>, etc.
        eqv[ch]=ce[0]

  for k in sorted(eqv.keys()):
    print '%x'%k,'%x'%eqv[k]
#+END_SRC   

#+RESULTS:
* <2017-07-27 Thu>
** Isolating run sequence
   - Implemented isolating run sequence restriction in BD16 by the following heuristic rule: "Interpret the isolating run sequence as such that end at a change in the level, unless the iso_level has been          raised".
   - This simple change in fribidi-bidi reduced the number of errors to 3!
   - Commit: 
   - Remaining errors (from file:err-it9.txt:
   | Line | Reason                                         |
   |------+------------------------------------------------|
   |  249 | How to retrieve the embedding level?           |
   |  286 | Canonical equivalent characters                |
   |  287 | "                                              |
   - [ ] Continue with the canonical characters.
** Canonical equivalence
   - Rewriting file:gen.tab/gen-brackets-tab.c
   - [ ] Why does make in the gen.tab dir not compile the file?
   - Run the generation as:
#+BEGIN_SRC sh
./gen.tab/gen-brackets-tab 2 ./gen.tab/unidata/BidiBrackets.txt ./gen.tab/unidata/UnicodeData.txt 
#+END_SRC   
  - Make by:
#+BEGIN_SRC sh
env CPPFLAGS='-g -Wall' make gen-brackets-tab V=1 
#+END_SRC  
   - Finished it. Down to 1 error in err-10.txt
   | Line | Reason                                         |
   |------+------------------------------------------------|
   |  249 | How to retrieve the embedding level?           |
  - Commit: 
